			+-------------------------+
			|        CS 318           |
			| PROJECT 0: Getting Real |
			|     DESIGN DOCUMENT     |
			+-------------------------+
				   
---- AUTHOR ----

>> Fill in your name and email address.

Dhilan Patel dpatel93@jhu.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     Booting Pintos
			     ==============

---- QUESTIONS ---- 
>> Put the screenshots of Pintos running in src/p0.
>> A1: Is there any particular issue that you would like us to know?

			     Debugging
			     =========

---- QUESTIONS: BIOS ---- 
>> B1: What is the first instruction that gets executed?
[f000:fff0]    0xffff0: ljmp   $0x3630,$0xf000e05b

>> B2: At which physical address is this instruction located?
0xffff0

>> B3: Can you guess why the first instruction is like this?
This first instruction is likely hard-wired to the BIOS ROM, and is responsible
for passing control to the boot loader. The BIOS has just loaded the 512-byte 
boot sector into physical memory starting at f000:fff0, and must jump the 
instruction pointer to allow the boot loader to begin executing its code.

Why ljmp? What are we comparing here?

>> B4: What are the next three instructions?
[f000:e05b]    0xfe05b: cmpw   $0x28,%cs:(%esi)
[f000:e062]    0xfe062: jne    0xd241d0ad
[f000:e066]    0xfe066: xor    %edx,%edx

---- QUESTIONS: BOOTLOADER ---- 
>> B5: How does the bootloader read disk sectors? In particular, what BIOS interrupt
is used?
The bootloader reads disk sectors one at a time, checking each time if it needs to proceed 
to the next drive or partition and iterating through partition table entries by incrementing 
%rsi. The bootloader will skip over drives that do not have an MBR signature, and partitions that 
are either unused or do not belong to the Pintos kernel. The BIOS system call interrupt "read_sector" 
is used to read the disks.

>> B6: How does the bootloader decides whether it successfully finds the Pintos kernel?
The bootloader decides it successfully finds the Pintos kernel when it reaches drive 0x80, 
as indicated by %es:(%si). It then jumps to a function that loads the kernel.

>> B7: What happens when the bootloader could not find the Pintos kernel?
If the bootloader could not find the Pintos kernel, it prints "Not found" and notifies the 
BIOS that the boot failed via instruction "int $0x18".

>> B8: At what point and how exactly does the bootloader transfer control to the Pintos kernel?
The bootloader transfers control to the Pintos kernel after it successfully reads all kernel sectors. 
It reads the start address of the kernel from its ELF header and stores it in memory in segment:offset 
format. It then jumps to the stored address after dereferencing the pointer to memory, which is necessary 
because 80x86 doesn't support jumping to locations stored in this format (potentially across multiple registers).

---- QUESTIONS: KERNEL ---- 
>> B9: At the entry of pintos_init(), what is the value of expression 
(gdb) p init_page_dir[pd_no(ptov(0))]
=> 0xc000efef:  int3   
=> 0xc000efef:  int3   
$1 = 0

The value of the expression (presumeably the page directory entry for the virtual address that corresponds to 
physical address 0x0, whose value is a pointer to the mapped physical page) is 0x0. 

>> B10: When palloc_get_page() is called for the first time,

>> B10.1 what does the call stack look like?
(gdb) bt
#0  palloc_get_page (flags=(PAL_ASSERT | PAL_ZERO)) at ../../threads/palloc.c:113
#1  0xc00203aa in paging_init () at ../../threads/init.c:168
#2  0xc002031b in pintos_init () at ../../threads/init.c:100
#3  0xc002013d in start () at ../../threads/start.S:180

>> B10.2 what is the return value in hexadecimal format?
(gdb) p pd
$4 = (uint32_t *) 0xc0101000
The return value is an unsigned integer pointer with the above value (hex address).

>> B10.3 what is the value of expression init_page_dir[pd_no(ptov(0))] in hexadecimal format?
(gdb) p init_page_dir[pd_no(ptov(0))]
=> 0xc000ef9f:  int3   
=> 0xc000ef9f:  int3   
$5 = 0
The value (pointer to mapped physical page) is still 0x0.

>> B11: When palloc_get_page() is called for the third time,

>> B11.1 what does the call stack look like?
(gdb) bt
#0  palloc_get_page (flags=PAL_ZERO) at ../../threads/palloc.c:113
#1  0xc0020a81 in thread_create (name=0xc002e895 "idle", priority=0, function=0xc0020eb0 <idle>, aux=0xc000efbc)
    at ../../threads/thread.c:178
#2  0xc0020976 in thread_start () at ../../threads/thread.c:111
#3  0xc0020334 in pintos_init () at ../../threads/init.c:119
#4  0xc002013d in start () at ../../threads/start.S:180

>> B11.2 what is the return value in hexadecimal format?
(gdb) p t
$9 = (struct thread *) 0xc0103000

>> B11.3 what is the value of expression init_page_dir[pd_no(ptov(0))] in hexadecimal format?
(gdb) p/x init_page_dir[pd_no(ptov(0))]
=> 0xc000ef5f:  int3   
=> 0xc000ef5f:  int3   
$11 = 0x102027

			     Kernel Monitor
			     ==============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
N/A

---- ALGORITHMS ----
>> C2: Explain how you read and write to the console for the kernel monitor.
The program uses input API function input_getc to read individual keystrokes from the hardware 
device as they come in. Keypresses and string feedback are added to the kernel monitor via putchar 
and printf, respectively, both of which are part of the console API.

>> C3: Any additional enhancement you implement?
N/A
